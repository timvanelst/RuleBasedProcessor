// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specifications.QueueProcessing
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("QueueProcessorScenarios")]
    public partial class QueueProcessorScenariosFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QueueProcessorScenarios.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("nl-NL"), "QueueProcessorScenarios", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Basisscenario")]
        public virtual void Basisscenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Basisscenario", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp"});
            table1.AddRow(new string[] {
                        "2016-05-18 14:30"});
#line 4
 testRunner.Given("de volgende klokmomenten worden aangeboden", ((string)(null)), table1, "Stel ");
#line 7
 testRunner.When("de kloktijden worden verwerkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp",
                        "Type"});
            table2.AddRow(new string[] {
                        "2016-05-18 14:31",
                        ""});
#line 8
 testRunner.Then("zijn er de volgende kloktijden", ((string)(null)), table2, "Dan ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Klokken met inkloktype")]
        public virtual void KlokkenMetInkloktype()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Klokken met inkloktype", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp",
                        "Type"});
            table3.AddRow(new string[] {
                        "2016-05-18 14:30",
                        "in"});
#line 13
 testRunner.Given("de volgende klokmomenten worden aangeboden", ((string)(null)), table3, "Stel ");
#line 16
 testRunner.When("de kloktijden worden verwerkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp",
                        "Type"});
            table4.AddRow(new string[] {
                        "2016-05-18 14:30",
                        "in"});
#line 17
 testRunner.Then("zijn er de volgende kloktijden", ((string)(null)), table4, "Dan ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Klokken met inkloktypes")]
        [NUnit.Framework.TestCaseAttribute("in", "in", new string[0])]
        [NUnit.Framework.TestCaseAttribute("inkpl", "in", new string[0])]
        [NUnit.Framework.TestCaseAttribute("uit", "out", new string[0])]
        [NUnit.Framework.TestCaseAttribute("in_gate", "onpremises", new string[0])]
        public virtual void KlokkenMetInkloktypes(string input, string verwachtResultaat, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Klokken met inkloktypes", exampleTags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp",
                        "Type"});
            table5.AddRow(new string[] {
                        "2016-05-18 14:30",
                        string.Format("{0}", input)});
#line 22
 testRunner.Given("de volgende klokmomenten worden aangeboden", ((string)(null)), table5, "Stel ");
#line 25
 testRunner.When("de kloktijden worden verwerkt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Als ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimeStamp",
                        "Type"});
            table6.AddRow(new string[] {
                        "2016-05-18 14:30",
                        string.Format("{0}", verwachtResultaat)});
#line 26
 testRunner.Then("zijn er de volgende kloktijden", ((string)(null)), table6, "Dan ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
